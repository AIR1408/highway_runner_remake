#version 330

struct Material
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

struct PointLight
{
	vec3 position;
	vec3 color;
};

in vec3 fragPos;
in vec3 normal;
in vec3 color;
in vec2 texCoord;

uniform sampler2D Texture0;
uniform sampler2D Texture11;
uniform sampler2D Texture12;
uniform sampler2D Texture13;

uniform vec3 viewPos;

uniform Material material;
uniform PointLight light;

out vec4 frag_color;

void main(){
	vec3 new_normal = normal;
	vec3 lightDir   = normalize(light.position - fragPos);
	vec3 viewDir    = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, new_normal);  
	
	float ambientComp  = 0.2;
	float diffuseComp  = max(dot(new_normal, lightDir), 0.0);
	float specularComp = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	
	vec3 ambient  = light.color * ambientComp  * material.ambient ;
	vec3 diffuse  = light.color * diffuseComp  * material.diffuse ;
	vec3 specular = light.color * specularComp * material.specular;
	
	// vec3 ambient  = light.color * ambientComp  * (material.ambient  + vec3(texture(Texture11, texCoord))) / 2;
	// vec3 diffuse  = light.color * diffuseComp  * (material.diffuse  + vec3(texture(Texture12, texCoord))) / 2;
	// vec3 specular = light.color * specularComp * (material.specular + vec3(texture(Texture13, texCoord))) / 2;
	
	
	vec3 result = ambient + diffuse + specular;
	if (length(texture(Texture0, texCoord).rgb) < 0.01)
		frag_color  = vec4(result, 1.0);
	else
		frag_color  = vec4(result, 1.0) * texture(Texture0, texCoord);
}
